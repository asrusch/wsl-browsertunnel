#!/bin/bash
# WSL Client Tunnels
# by Greg Lawler and Andy Rusch

#### Prerequisites ####
# Firefox 64-bit installed
# autossh package is installed
# Your WSL Username and key are on jump_host

#### Firefox Config ####
# - Open Firefox and enter about:profiles in the URL bar
# - Create a new profile called "Tunnels"
# - Open Firefox with the Tunnels profile:
#    - Preferences -> General -> Network Settings -> Manual proxy configuration
#        SOCKS HOST: localhost
#        Port: 2080
#        SOCKS v5: check

##### Defaults
# - change for your needs
 : ${config:=~/wsl-browsertunnel/tunnels.conf}
 : ${firefox_profile:=Tunnels}

# Ensure Firefox is in $PATH.
export PATH="$PATH:/mnt/c/Program Files/Mozilla Firefox"

# Exit on error
set -e

function stop-all {
	echo "Stopping autossh sessions..."
	ps -ef | grep autossh | grep 2080 | grep -v grep | awk '{print $2}' | xargs kill -9
	ps -ef | grep ssh | grep 2080 | grep -v grep | awk '{print $2}' | xargs kill -9
	show-status
}

function usage_message {
    echo `basename $0`: ERROR: $* 1>&2
    echo Usage: `basename $0` '{start|stop|status}' 1>&2
    exit 1
}

function show_locations() {
    echo Usage: `basename $0` '{location|stop|status}' 1>&2
    echo ""
    echo "Available locations in" $config
    while IFS=',' read -r client_service ssh_server client_url; do
        echo "$client_service" 
    done < $config
}

function show-status {
	ps auxw | grep -v -e autossh -e grep | grep -q "D 2080" && echo "Dynamic SSH tunnel running..." || echo "No dynamic SSH tunnels running..."
}

function launch_firefox() {
    # Start the Firefox profile
    firefox.exe -P $firefox_profile $client_url > /dev/null 2>&1 &
}

function start_tunnel {
    # Exit if existing autossh session detected
    ps auxw | grep -v -e autossh -e grep | grep -q "D 2080" && echo "SSH tunnel already running..." && exit 1
	echo "Starting dynamic SSH tunnel $client_service..."
    # Open tunnel
    autossh -N -M 25000 -D 2080 -o ServerAliveInterval=3 -o ServerAliveCountMax=3  $ssh_server > /dev/null 2>&1 &
	show-status
}

function get_client() {
    while IFS=',' read -r client_service ssh_server client_url || [ -n "$line" ]; do
        if [[ $client_service == $jump_host ]]
        then
            start_tunnel "$ssh_server"
            sleep 1
            launch_firefox "$client_url"
            echo "Launching Firefox..." $client_url
            # exit 1
        fi
    done < $config
}

if [ $# -eq 0 ]; # If no input, show available locations
then
    show_locations
    exit 1
else
    jump_host=${1//[^a-zA-Z0-9]/-} # Sanitize the input a bit
    if [ $jump_host == "stop" ]
    then
        stop-all
    elif [ $jump_host == "status" ]
    then
        show-status
    else
        get_client "$jump_host"
    fi
fi
